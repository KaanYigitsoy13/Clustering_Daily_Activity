{"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":7746251,"sourceType":"datasetVersion","datasetId":1041311}],"dockerImageVersionId":30684,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/kaanyiitsoy/learning-clustering-on-daily-activity-data?scriptVersionId=172073811\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"# Introduction\n\nHello! I am teaching myself clustering and related topics. I've uploaded this notebook to showcase my progress and would appreciate any feedback to help me improve. Thank you for your insights!\n\nIn this project, we apply K-means clustering to user activity data, using both scaling and Principal Component Analysis (PCA) for preprocessing. Our analysis focuses on the comparison of clustering performance between scaled and PCA-transformed data, employing metrics like the silhouette, Calinski-Harabasz, and Davies-Bouldin scores to assess cluster quality. This notebook outlines our approach and findings.\n\nIn our approach, we cluster daily activity data, comprising 940 entries from 33 individuals. By analyzing each day as a distinct sample, we assume these daily records represent the broader population's behavior patterns. This method allows us to identify activity trends and categorize days based on similar activity characteristics within our dataset.","metadata":{"id":"MCF7B1RnDY2S"}},{"cell_type":"markdown","source":"# Packages","metadata":{"id":"8QOMK370wRfv"}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.decomposition import PCA\n\nfrom sklearn.cluster import KMeans\n\nfrom sklearn.metrics import silhouette_score\nfrom sklearn.metrics import calinski_harabasz_score\nfrom sklearn.metrics import davies_bouldin_score\n\nimport warnings","metadata":{"id":"YwUtYZSGvi0a","execution":{"iopub.status.busy":"2024-04-14T19:55:26.91407Z","iopub.execute_input":"2024-04-14T19:55:26.915333Z","iopub.status.idle":"2024-04-14T19:55:26.922173Z","shell.execute_reply.started":"2024-04-14T19:55:26.915292Z","shell.execute_reply":"2024-04-14T19:55:26.920735Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Raw Data","metadata":{"id":"aPLLndZcH2ge"}},{"cell_type":"code","source":"# Data import\ndata_original = pd.read_csv(\"/kaggle/input/fitbit/mturkfitbit_export_4.12.16-5.12.16/Fitabase Data 4.12.16-5.12.16/dailyActivity_merged.csv\")","metadata":{"id":"oT6ou6zDH4z5","execution":{"iopub.status.busy":"2024-04-14T19:55:26.923982Z","iopub.execute_input":"2024-04-14T19:55:26.924529Z","iopub.status.idle":"2024-04-14T19:55:26.941129Z","shell.execute_reply.started":"2024-04-14T19:55:26.9245Z","shell.execute_reply":"2024-04-14T19:55:26.940001Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# First 5 rows\ndata_original.head(5)","metadata":{"id":"hIFSrItzH5pT","outputId":"ba963233-89a2-4272-d828-22e028c57dcc","execution":{"iopub.status.busy":"2024-04-14T19:55:26.942477Z","iopub.execute_input":"2024-04-14T19:55:26.942782Z","iopub.status.idle":"2024-04-14T19:55:26.958524Z","shell.execute_reply.started":"2024-04-14T19:55:26.942757Z","shell.execute_reply":"2024-04-14T19:55:26.957529Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Summary Function\npd.options.display.float_format = '{:,.2f}'.format\ndef summary(df):\n    print(f'data shape: {df.shape}')\n    summ = pd.DataFrame(df.dtypes, columns=['data type'])\n    summ['count'] = df.count().values\n    summ['#missing'] = df.isnull().sum().values\n    summ['%missing'] = df.isnull().sum().values / len(df) * 100\n    summ['#unique'] = df.nunique().values\n    desc = pd.DataFrame(df.describe(include='all').transpose())\n    summ['min'] = desc['min'].values\n    summ['max'] = desc['max'].values\n    summ['average'] = desc['mean'].values\n    summ['standard_deviation'] = desc['std'].values\n    return summ\n\nprint('\\033[93m\\033[1m' + 'Summary Table: ' + '\\033[0m')\nsummary(data_original)","metadata":{"id":"_tbM9JWUH6dH","outputId":"d7293a6b-4dc1-4f2f-cb02-87028ab4fcdc","execution":{"iopub.status.busy":"2024-04-14T19:55:26.959739Z","iopub.execute_input":"2024-04-14T19:55:26.960035Z","iopub.status.idle":"2024-04-14T19:55:27.027563Z","shell.execute_reply.started":"2024-04-14T19:55:26.96001Z","shell.execute_reply":"2024-04-14T19:55:27.026468Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Data Pre-processing","metadata":{"id":"n-YQidHvwamj"}},{"cell_type":"markdown","source":"The dataset comprises 940 unique entries from 33 individuals. We've selected key columns for our analysis, which include 'ActivityDate', 'TotalSteps', 'VeryActiveMinutes', 'FairlyActiveMinutes', 'LightlyActiveMinutes', 'SedentaryMinutes', and 'Calories'. Our focus will primarily be on 'TotalSteps', 'TotalDistance', 'VeryActiveMinutes', 'FairlyActiveMinutes', 'LightlyActiveMinutes', 'SedentaryMinutes', and 'Calories', as these metrics are crucial for understanding activity patterns. Upon examining the data, no significant outliers, missing values, or problematic data were detected, so no further data cleaning is necessary.\n\n\n\n\n\n\n","metadata":{"id":"zO_fgaDv3IhX"}},{"cell_type":"code","source":"# Filtering chosen columns\ncolumns_chosen = ['TotalSteps', 'TotalDistance', 'VeryActiveMinutes', 'FairlyActiveMinutes', 'LightlyActiveMinutes', 'SedentaryMinutes', 'Calories' ]\ndata = data_original[columns_chosen].copy()","metadata":{"id":"-lFUxCDPv2YG","execution":{"iopub.status.busy":"2024-04-14T19:55:27.031161Z","iopub.execute_input":"2024-04-14T19:55:27.031592Z","iopub.status.idle":"2024-04-14T19:55:27.038255Z","shell.execute_reply.started":"2024-04-14T19:55:27.031553Z","shell.execute_reply":"2024-04-14T19:55:27.037016Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data.head(5)","metadata":{"id":"k7j23hvTv-Iq","outputId":"17b8e174-402d-4217-c7e2-4774db3d619b","execution":{"iopub.status.busy":"2024-04-14T19:55:27.039473Z","iopub.execute_input":"2024-04-14T19:55:27.039782Z","iopub.status.idle":"2024-04-14T19:55:27.059481Z","shell.execute_reply.started":"2024-04-14T19:55:27.039758Z","shell.execute_reply":"2024-04-14T19:55:27.058435Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"summary(data)","metadata":{"id":"9quJHH023Wht","outputId":"ca6d2f5d-8be9-4ff2-d48b-58184e529454","execution":{"iopub.status.busy":"2024-04-14T19:55:27.060867Z","iopub.execute_input":"2024-04-14T19:55:27.062131Z","iopub.status.idle":"2024-04-14T19:55:27.096556Z","shell.execute_reply.started":"2024-04-14T19:55:27.062067Z","shell.execute_reply":"2024-04-14T19:55:27.095439Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Exploratory Data Analysis","metadata":{"id":"f29loYku7tU5"}},{"cell_type":"markdown","source":"Color palettes for visualization","metadata":{"id":"MeJjKLUl8Sj_"}},{"cell_type":"code","source":"# Color paletttes for visualization\ncolor_palette = sns.color_palette([\"#5A9\", \"#B6D7A8\", \"#A2C4C9\",\n                                   \"#F6B26B\", \"#6D9EEB\", \"#A4C2F4\",\n                                   \"#D5A6BD\",\n                                   ])\n\nsns.palplot(color_palette)\nplt.show()\n\nblack_palette = ['#100C07', '#3E3B39', '#6D6A6A', '#9B9A9C', '#CAC9CD']\nsns.palplot(black_palette)\nplt.show()","metadata":{"id":"dPTx__0q8Hf7","outputId":"b08e061e-d52d-49e0-d67d-ecd8b557f3dc","execution":{"iopub.status.busy":"2024-04-14T19:55:27.097908Z","iopub.execute_input":"2024-04-14T19:55:27.098254Z","iopub.status.idle":"2024-04-14T19:55:27.326242Z","shell.execute_reply.started":"2024-04-14T19:55:27.098225Z","shell.execute_reply":"2024-04-14T19:55:27.324708Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Data distributions\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\nfor color, column in enumerate(data.columns):\n  print(f'\\033[93m\\033[1m Data Distribution : {column}\\033[0m')\n  plt.figure(figsize=(16, 3))\n\n  plt.subplot(1, 2, 1)\n  sns.histplot(data[column], kde=True, bins= 10, color = color_palette[color])\n  plt.title(f'{column} Histogram', fontweight = 'bold', fontsize = 14, fontfamily = 'sans-serif', color = black_palette[0])\n\n  plt.subplot(1, 2, 2)\n  sns.boxenplot(data=data, x=column, color = color_palette[color])\n  plt.title(f'{column} Boxplot', fontweight = 'bold', fontsize = 14, fontfamily = 'sans-serif', color = black_palette[0])\n\n  plt.show()\n  print('\\n')","metadata":{"id":"J282tt5t8Ue7","outputId":"2c4c20af-0f0f-4934-b89d-632ddf5ea46a","execution":{"iopub.status.busy":"2024-04-14T19:55:27.328613Z","iopub.execute_input":"2024-04-14T19:55:27.32922Z","iopub.status.idle":"2024-04-14T19:55:31.039354Z","shell.execute_reply.started":"2024-04-14T19:55:27.329171Z","shell.execute_reply":"2024-04-14T19:55:31.038208Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Correlation heatmap\nplt.figure(figsize=(8,6))\n\ncorrelation_matrix = data.corr()\n\nmask = np.triu(np.ones_like(correlation_matrix, dtype=bool))\nannot_mask = (correlation_matrix <= -0.2) | (correlation_matrix >= 0.2)\nannot_text = np.where(annot_mask, correlation_matrix.round(2).astype(str), '')\n\nsns.heatmap(correlation_matrix, mask=mask, annot=annot_text, cmap='coolwarm', fmt='', center=0)\nplt.title('Variable Correlations', fontweight = 'bold', fontsize = 14, fontfamily = 'sans-serif', color = black_palette[0])\n\nplt.show()","metadata":{"id":"UrSjl5Rl81n4","outputId":"a820754b-694d-40df-b558-fcbb2d39c766","execution":{"iopub.status.busy":"2024-04-14T19:55:31.040784Z","iopub.execute_input":"2024-04-14T19:55:31.041149Z","iopub.status.idle":"2024-04-14T19:55:31.501248Z","shell.execute_reply.started":"2024-04-14T19:55:31.041117Z","shell.execute_reply":"2024-04-14T19:55:31.49995Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Clustering","metadata":{"id":"8l6o8mM0DNZB"}},{"cell_type":"markdown","source":"Since the data points are in various units (distance, minutes, calories) with significant range differences, we will first scale our data to normalize these discrepancies.\n\nWe will proceed by analyzing both PCA-transformed and non-PCA data. Subsequently, we will calculate silhouette, Calinski-Harabasz, and Davies-Bouldin scores to evaluate which preprocessing method yields better clustering performance.\n\nWe will be using K-means clustering. K-means clustering is a popular unsupervised machine learning algorithm used to partition a set of data points into K distinct, non-overlapping clusters. It groups data points into clusters such that the points in each cluster are similar to each other while being different from points in other clusters. The goal is to minimize the variance within each cluster.","metadata":{"id":"k9DQ0x2VEbGu"}},{"cell_type":"markdown","source":"## Clustering\n","metadata":{"id":"5q-i2ZTTMIsM"}},{"cell_type":"markdown","source":"**Scaled Data**","metadata":{"id":"1sNin4s4LEjC"}},{"cell_type":"code","source":"# Scaling\nscaler = StandardScaler()\nscaled_data = scaler.fit_transform(data)","metadata":{"id":"MvX-Dm-_DN3D","execution":{"iopub.status.busy":"2024-04-14T19:55:31.505558Z","iopub.execute_input":"2024-04-14T19:55:31.505941Z","iopub.status.idle":"2024-04-14T19:55:31.51612Z","shell.execute_reply.started":"2024-04-14T19:55:31.505911Z","shell.execute_reply":"2024-04-14T19:55:31.51519Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Pca Data**","metadata":{"id":"LTm-EBXNJ9LE"}},{"cell_type":"code","source":"# PCA\npca = PCA()\npca.fit(scaled_data)\n\n# Calculate the cumulative variance explained by each component\ncumulative_variance = pca.explained_variance_ratio_.cumsum()\n\n# Plot the cumulative variance\nplt.figure(figsize=(8, 4))\nplt.plot(range(1, len(cumulative_variance) + 1), cumulative_variance, marker='o')\nplt.title('Cumulative Variance Explained by PCA Components')\nplt.xlabel('Number of Components')\nplt.ylabel('Cumulative Explained Variance')\nplt.grid(True)\nplt.show()\n\n\n# Choose the number of components that explain at least 90% of the variance\nn_components = sum(cumulative_variance < 0.90) + 1\n\npca = PCA(n_components=n_components)\npca_data = pca.fit_transform(data)\n\n# Create the pca_data\npca_data = pd.DataFrame(data=pca_data, columns=[f'PC{i}' for i in range(1, n_components + 1)])\n\nprint('\\n')\nprint(f'Chosen Number of Components is:  {n_components}')\n\nprint('\\n')\npca_data.head(3)","metadata":{"id":"hpJXrtw1JIsd","outputId":"359df01f-3343-4f3b-8e19-36842488feff","execution":{"iopub.status.busy":"2024-04-14T19:55:31.517519Z","iopub.execute_input":"2024-04-14T19:55:31.518476Z","iopub.status.idle":"2024-04-14T19:55:31.82844Z","shell.execute_reply.started":"2024-04-14T19:55:31.518441Z","shell.execute_reply":"2024-04-14T19:55:31.82734Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Elbow Method**\n\nDeciding on how many clusters will be created.\n\n Inertia is the sum of squared distances of samples to their closest cluster center. In simple terms, it measures the compactness of the clusters. Lower values of inertia are better as they indicate that the clusters are more dense and well-defined.\n\n Choosing k at the elbow point ensures that the number of clusters is neither too small to capture the diversity of the data nor too large to overfit the data with too many specific clusters.","metadata":{"id":"Su1whHCbGzSJ"}},{"cell_type":"code","source":"inertia = []\nfor k in range(1, 7):\n    kmeans = KMeans(n_clusters=k, n_init=10, random_state=42)\n    kmeans.fit(scaled_data)\n    inertia.append(kmeans.inertia_)\n\n# Plot the Elbow graph\nplt.figure(figsize=(8, 4))\nplt.plot(range(1, 7), inertia, marker='o')\nplt.title('Elbow Method')\nplt.xlabel('Number of Clusters (k)')\nplt.ylabel('Inertia')\nplt.xticks(range(1, 7))\nplt.grid(True)\nplt.show()","metadata":{"id":"16o5Hv7vKMa1","outputId":"607392b2-1ca7-4cd8-d23d-afb605509c5a","execution":{"iopub.status.busy":"2024-04-14T19:55:31.82995Z","iopub.execute_input":"2024-04-14T19:55:31.830403Z","iopub.status.idle":"2024-04-14T19:55:32.324815Z","shell.execute_reply.started":"2024-04-14T19:55:31.830374Z","shell.execute_reply":"2024-04-14T19:55:32.323834Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"3 clusters will be created.\n\n**KMeans Clustering**","metadata":{"id":"gcDIcwnqJebx"}},{"cell_type":"code","source":"# Scaled Data Clustering\nkmeans = KMeans(n_clusters=3, n_init=10, random_state=42)\nkmeans.fit(scaled_data)\nlabels = kmeans.labels_\ndata['Cluster_Scaled'] = labels","metadata":{"id":"V7xK5e9lJbsf","execution":{"iopub.status.busy":"2024-04-14T19:55:32.32602Z","iopub.execute_input":"2024-04-14T19:55:32.326331Z","iopub.status.idle":"2024-04-14T19:55:32.377999Z","shell.execute_reply.started":"2024-04-14T19:55:32.326305Z","shell.execute_reply":"2024-04-14T19:55:32.377057Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Pca Data Clustering\nkmeans = KMeans(n_clusters=3, n_init=10, random_state=42)\nkmeans.fit(pca_data)\nlabels = kmeans.labels_\ndata['Cluster_PCA'] = labels","metadata":{"id":"y_GVKXHYJz9J","execution":{"iopub.status.busy":"2024-04-14T19:55:32.379254Z","iopub.execute_input":"2024-04-14T19:55:32.379942Z","iopub.status.idle":"2024-04-14T19:55:32.420514Z","shell.execute_reply.started":"2024-04-14T19:55:32.379911Z","shell.execute_reply":"2024-04-14T19:55:32.419535Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Performance Evaluation","metadata":{"id":"ObWOmhVSMBU8"}},{"cell_type":"markdown","source":"Silhouette Score: Measures how similar a point is to its own cluster compared to other clusters. Ranges from -1 (incorrect clustering) to +1 (highly dense clustering).\n\nCalinski-Harabasz Score: Evaluates clusters by comparing the sum of between-cluster dispersion to within-cluster dispersion. Higher scores indicate better-defined clusters.\n\nDavies-Bouldin Score: Reflects the average similarity of each cluster with its most similar one; lower scores suggest better separation and less dispersion.","metadata":{"id":"dQ8wZrqkAsyF"}},{"cell_type":"code","source":"# Calculating the scores for Scaled Data Clustering\nsilhouette_scaled = silhouette_score(scaled_data, data['Cluster_Scaled'])\ncalinski_scaled = calinski_harabasz_score(scaled_data, data['Cluster_Scaled'])\ndavies_scaled = davies_bouldin_score(scaled_data, data['Cluster_Scaled'])\n\n# Calculating the scores for PCA Data Clustering\nsilhouette_pca = silhouette_score(pca_data, data['Cluster_PCA'])\ncalinski_pca = calinski_harabasz_score(pca_data, data['Cluster_PCA'])\ndavies_pca = davies_bouldin_score(pca_data, data['Cluster_PCA'])\n\nscores = {\n    'Silhouette Score': [silhouette_scaled, silhouette_pca],\n    'Calinski-Harabasz Score': [calinski_scaled, calinski_pca],\n    'Davies-Bouldin Score': [davies_scaled, davies_pca]\n}\n\nfig, axs = plt.subplots(1, 3, figsize=(15, 5))\nfor ax, (metric, values) in zip(axs, scores.items()):\n    ax.bar(['Scaled Data', 'PCA Data'], values, color=['blue', 'green'])\n    ax.set_title(metric)\n    ax.set_ylabel('Score')\n    ax.set_ylim(min(min(values)*0.9, max(values)*1.1))\n\nplt.tight_layout()\nplt.show()","metadata":{"id":"hp4F3ot9N0EV","outputId":"57121af8-f392-47d4-f946-4b0159cf5bb1","execution":{"iopub.status.busy":"2024-04-14T19:55:32.422105Z","iopub.execute_input":"2024-04-14T19:55:32.422684Z","iopub.status.idle":"2024-04-14T19:55:33.214471Z","shell.execute_reply.started":"2024-04-14T19:55:32.422651Z","shell.execute_reply":"2024-04-14T19:55:33.213363Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"The K-means clustering algorithm performed better on PCA-transformed data compared to scaled data. This improvement likely results from PCA's ability to reduce dimensionality and highlight key features, thereby enhancing clustering effectiveness by focusing on the most significant patterns in the data.","metadata":{"id":"NmGKGliBDH6Y"}},{"cell_type":"markdown","source":"# Final Results","metadata":{"id":"bbbgFAudMNA_"}},{"cell_type":"code","source":"# Pca Data Cluster Means\ndata.groupby('Cluster_PCA').mean().head()","metadata":{"id":"sLuE-JQ8Pqn-","outputId":"dd4d8013-51b7-4646-f2d1-e9000c904f66","execution":{"iopub.status.busy":"2024-04-14T19:55:33.215828Z","iopub.execute_input":"2024-04-14T19:55:33.216173Z","iopub.status.idle":"2024-04-14T19:55:33.231636Z","shell.execute_reply.started":"2024-04-14T19:55:33.216145Z","shell.execute_reply":"2024-04-14T19:55:33.230616Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Cluster 0** represents a moderately active group, averaging 8,672 steps and 6.15 miles. This cluster engages in a variety of physical activities, with a notable focus on lightly active minutes (248 minutes on average). Despite a relatively high average sedentary time of 925 minutes, individuals in this cluster manage to burn an average of 2,415 calories, indicating a balanced engagement across different activity intensities.\n\n**Cluster 1** is the most active cluster, with members averaging 15,170 steps and 11.24 miles. They are significantly engaged in very active pursuits, averaging 63 very active minutes and 29 fairly active minutes. This cluster also has the lowest sedentary time at 903 minutes, contributing to the highest average caloric expenditure of 2,936 calories. This highlights their high level of physical engagement and efficient activity distribution.\n\n**Cluster 2** is the least active, characterized by the lowest activity levels with an average of only 2,503 steps and 1.72 miles. This cluster's engagement in physical activities is minimal across all intensities, and it records the highest average sedentary time at 1,118 minutes. Correspondingly, they have the lowest average caloric burn at 1,843 calories, suggesting a predominantly sedentary lifestyle.","metadata":{"id":"aP__CkPWHKZy"}},{"cell_type":"code","source":"# Visualize cluster distributions across various metrics\nplt.figure(figsize=(20,12))\n\nplt.subplot(3, 3, 1)\nsns.kdeplot(data=data, x='TotalSteps', hue='Cluster_PCA', fill=True, palette='viridis')\nplt.xlabel('TotalSteps')\nplt.ylabel('Density')\n\nplt.subplot(3, 3, 2)\nsns.kdeplot(data=data, x='TotalDistance', hue='Cluster_PCA', fill=True, palette='viridis')\nplt.xlabel('TotalDistance')\nplt.ylabel('Density')\n\nplt.subplot(3, 3, 3)\nsns.kdeplot(data=data, x='VeryActiveMinutes', hue='Cluster_PCA', fill=True, palette='viridis')\nplt.xlabel('VeryActiveMinutes')\nplt.ylabel('Density')\n\nplt.subplot(3, 3, 4)\nsns.kdeplot(data=data, x='FairlyActiveMinutes', hue='Cluster_PCA', fill=True, palette='viridis')\nplt.xlabel('FairlyActiveMinutes')\nplt.ylabel('Density')\n\nplt.subplot(3, 3, 5)\nsns.kdeplot(data=data, x='LightlyActiveMinutes', hue='Cluster_PCA', fill=True, palette='viridis')\nplt.xlabel('LightlyActiveMinutes')\nplt.ylabel('Density')\n\nplt.subplot(3, 3, 6)\nsns.kdeplot(data=data, x='SedentaryMinutes', hue='Cluster_PCA', fill=True, palette='viridis')\nplt.xlabel('SedentaryMinutes')\nplt.ylabel('Density')\n\nplt.subplot(3, 3, 7)\nsns.kdeplot(data=data, x='Calories', hue='Cluster_PCA', fill=True, palette='viridis')\nplt.xlabel('Calories')\nplt.ylabel('Density')\n\nplt.show()","metadata":{"id":"A4Qkpmj1MSNy","outputId":"4330eb14-74d9-4d22-b89b-dd83df17a733","execution":{"iopub.status.busy":"2024-04-14T19:55:33.233165Z","iopub.execute_input":"2024-04-14T19:55:33.233569Z","iopub.status.idle":"2024-04-14T19:55:35.492455Z","shell.execute_reply.started":"2024-04-14T19:55:33.233533Z","shell.execute_reply":"2024-04-14T19:55:35.491179Z"},"trusted":true},"execution_count":null,"outputs":[]}]}